Thulaxan U

Practical test-Firehouse Technology
////////////////////////////////////////////
User Details
////////////////////////////////////////////


@Entity
@Table(name="users")
public class User{
@id
@GeneratedValue(Strategy=GenerationType.IDENTITY)
private String  username; //username
private String password;  //password
}


public class SecurityConfig extends
WebSecurity ConfigurerAdapter{
private UserDetailsService
userDetailsService;


@Override
protected void configure(HttpSecurity http)throws Exception{
http.authorizeRequests().anyRequest().authenticated().and()form Login();

}

@Override
protected void configure(AuthenticationManagerBuilder auth)throws Exception{

auth.userDetailsService(userDetailsService);
}


public PasswordEncoder passwordEncoder(){

return new BCryptPasswordEncoder();
}

public class UserService implements UserDetailsService{

private UserRepository 
userRepository;

public UserDetails
loadUserDetails loadUserByUsername (String username)
throws UsernameNotFoundException{
User user=userRepository.findByUsername(username);
if(user==null){
throw new 
UsernameNotFoundException("Invalid username or password");
}
}

return new org.springframework


//////////////////////////////////////////////////////////
bookmarks
/////////////////////////////////////////////////////////


@Entity
@Table(name="bookmarks")  
public class Bookmark{
@id
@GeneratedValue(Strategy=GenerationType.IDENTITY)

private Long id;

private String title; //name
private String url; //URL
private String Description; // Description
private String Status; // Status
private Date ExpiryDate; //Expiry Date

//getters and setters

}


public class BookmarkController{
private BookmarkRepository
bookmarkRepository;

public ResponseEntity<Void>
createBookmarks(@RequestBody List<Bookmark>bookmarks){
bookmarkRepository.deleteAll();

bookmarkRepository.save all(bookmarks);
return ResponseEntity.ok().build();


}
}


public interface BookmarkRepository extends Repository<Bookmarks,Long>{}




/////////////////////////////////////////////////////////////////////////
Login HTML
////////////////////////////////////////////////////////////////////////

<form action="action_page.php" method="post">
  <div class="imgcontainer">
    <img src="img_avatar2.png" alt="Avatar" class="avatar">
  </div>

  <div class="container">
    <label for="uname"><b>Username</b></label>
    <input type="text" placeholder="Enter Username" name="uname" required>

    <label for="psw"><b>Password</b></label>
    <input type="password" placeholder="Enter Password" name="psw" required>

    <button type="submit">Login</button>
    <label>
      <input type="checkbox" checked="checked" name="remember"> Remember me
    </label>
  </div>

  <div class="container" style="background-color:#f1f1f1">
    <button type="button" class="cancelbtn">Cancel</button>
    <span class="psw">Forgot <a href="#">password?</a></span>
  </div>
</form>

///////////////////////////////////////////////////////////////////////////////////
login.Component.ts
///////////////////////////////////////////////////////////////////////////////////


import{ Component } from '@angular/core';

@Component(
{
selector:'login',
templateUrl:'.login.component.html',
styles:[]

}
)
 export class LoginComponent

////////////////////////////////////////////////////////////////////////////
model
provider.class.ts

export class providerClass{
username:any;
password:;
}




/////////////////////////////////////////////////////////////////////////////


import {Injectable} from 'angular/core';

export class BackendInterceptor implements HttpInterceptor{
intercept(request:HttpRequest<any>,next:HttpHandler):Observable<HttpEvent<any>>{
const{url,method,headers,body}=request;

return handleRoute();

function handleRoute();

function handleRoute(){
switch(true){
case.url.endsWith('/users/authenticate') && method === 'POST':
return authenticate();
case.url.endsWith('/users/login') && method === 'POST':
return login();
case.url.endsWith('/users') && method === 'GET':
return getUsers();
case.url.match() && method === 'PUT':
return updateUser();
case.url.match() && method === 'DELETE':
return deleteUser();
default:

return next.handle(request);
}
}

function authenticate(){
const{username,password} =body;
const user=users.find(x =>x.username ===username && x.password ===password);
if(!user)return error('Username or password is incorrect');
return ok({

...basicdetails(user),
token:

})
}



import {Injectable} from 'angular/core';
import{Router} from '@angular/router';
import{HttpClient} from '@angular/common/http';


export class AccountService{
private userSubject:BehaviorSubject<Users>;
public user:Observale<Users>;

constructor(

private router:Router,
private http:HttpClient
){
this.userSubject=new BehaviorSubject<Users>(JSON.parse(localStoragde.getItem('user')));
this.user=this.userSubject.asObservable();
}

public get userValue():User{
return this.userSubject.value;
}

login(username,password){
return this.http.post<user>(`${environment.apiUrl}/users/authenticate`,{username,password})
.pipe(map(user=>{
localstorage.setItem('user',JSON.stringify(user));
this.userSubject.next(user);
return user;
}
));
}


}


import{Routes ,RouterModule} from'angular/core';
import {LoginComponent} from './login.component';

const routes:Routes=[
{
path:'',component:LayoutComponent,
User:[
{path:'login',component:Login Component},
]
}
];

export class AccountRoutingmodule{}



